# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist =
    # always keep coverage-clean first
    # coverage-clean
    # code linters/stylers
    lint
    manifest
    pyroma
    flake8
    mypy
    # documentation linters/checkers
    doc8
    docstr-coverage
    docs
    # the actual tests
    py
    # always keep coverage-report last
    # coverage-report

[testenv]
# Runs on the "tests" directory by default, or passes the positional
# arguments from `tox -e py <posargs_1> ... <posargs_n>
commands = coverage run -p -m pytest --durations=20 {posargs:tests}
extras =
    # See the [options.extras_require] entry in setup.cfg for "tests"
    tests

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:lint]
deps =
    black
skip_install = true
commands = black src/contnextViewer/ tests/ setup.py
description = Run black.

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest
description = Check that the MANIFEST.in is written properly and give feedback on how to fix it.

[testenv:flake8]
skip_install = true
deps =
    flake8
    flake8-black
    flake8-bandit
    flake8-colors
    flake8-docstrings
    flake8-import-order
    flake8-bugbear
    pep8-naming
    pydocstyle
    darglint
    # The following are no longer necessary because of black:
    # flake8-commas
    # flake8-broken-line
commands =
    flake8 src/contnextViewer/ tests/ setup.py
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming). See https://cthoyt.com/2020/04/25/how-to-code-with-me-flake8.html for more information.

[testenv:format]
skip_install = true
deps =
    black
commands =
    black src/contnextViewer/ tests/ setup.py
description = Run the black code formatter on all code

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy --install-types --non-interactive --ignore-missing-imports src/contnextViewer/
description = Run the mypy tool to check static typing on the project.

[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage src/contnextViewer/ tests/ setup.py --skip-private --skip-magic
description = Run the docstr-coverage tool to check documentation coverage

[testenv:docs]
changedir = docs
extras =
    # See the [options.extras_require] entry in setup.cfg for "docs"
    docs
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt
whitelist_externals =
    /bin/cp
    /bin/cat
    /bin/mkdir

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
passenv = HOME
deps =
    bumpversion

[testenv:build]
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
description = Release the code to PyPI so users can pip install it
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:testrelease]
description = Release the code to the test PyPI site
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository-url https://test.pypi.org/simple/ dist/*

[testenv:finish]
skip_install = true
passenv = HOME
deps =
    {[testenv:build]deps}
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion release
    {[testenv:release]commands}
    git push
    bumpversion patch
    git push
whitelist_externals =
    /usr/bin/git
